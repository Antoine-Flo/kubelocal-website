#!/usr/bin/env bash

set -euo pipefail

# Configuration
readonly GITHUB_API_URL="https://api.github.com/repos/Antoine-Flo/kubelocal/releases/latest"
readonly TEMP_DIR="/tmp/kubelocal-install"

# Cleanup function
cleanup() {
    rm -rf "$TEMP_DIR" 2>/dev/null || true
}

# Trap to ensure cleanup on exit
trap cleanup EXIT

# Detect platform
detect_platform() {
    local os=""
    local arch=""
    
    case "$(uname -s)" in
        Linux*)     os="linux" ;;
        *)          echo "Platforme non supportée: $(uname -s). Seul Linux AMD64 est supporté pour l'instant." >&2; exit 1 ;;
    esac
    
    case "$(uname -m)" in
        x86_64|amd64)  arch="amd64" ;;
        *)             echo "Architecture non supportée: $(uname -m). Seul AMD64 est supporté pour l'instant." >&2; exit 1 ;;
    esac
    
    local platform="${os}-${arch}"
    echo "$platform"
}

# Get latest release and download URL
get_download_url() {
    local platform="$1"
    local api_response
    
    api_response=$(curl -s "$GITHUB_API_URL") || exit 1
    local download_url
    download_url=$(echo "$api_response" | grep -o "\"browser_download_url\": \"[^\"]*${platform}[^\"]*\"" | grep -v "\.tar\.gz" | cut -d'"' -f4)
    echo "$download_url"
}

# Download and execute binary
download_and_execute() {
    local download_url="$1"
    local platform="$2"
    
    mkdir -p "$TEMP_DIR"
    cd "$TEMP_DIR"
    
    # Extraire le nom du fichier depuis l'URL
    local filename
    filename=$(basename "$download_url")
    
    curl -fsSL -o "$filename" "$download_url" || exit 1
    chmod +x "$filename"
    
    # Rediriger stdin vers le terminal pour permettre les interactions
    "./$filename" "$@" < /dev/tty
}

# Main
platform=$(detect_platform)
download_url=$(get_download_url "$platform")
download_and_execute "$download_url" "$platform" "$@"
